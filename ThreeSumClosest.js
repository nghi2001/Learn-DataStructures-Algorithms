let arr = [
    -485,657,-513,584,-22,-387,-215,919,682,-801,-614,298,-261,729,282,-852,-14,794,-769,961,-313,409,959,-605,-356,522,-211,544,-500,-910,-631,733,-745,-432,681,-723,-196,349,-154,-574,-550,948,-566,-171,-514,520,910,568,571,-230,-622,39,865,-80,-554,-799,-519,371,870,997,150,81,-580,850,-913,-375,187,-839,-180,787,-112,-844,601,-827,-984,659,690,152,926,-293,-843,950,780,790,440,199,-904,7,-923,-577,960,142,-477,-121,-996,-890,192,777,178,93,-495,-611,338,-421,28,44,504,-518,871,814,920,-856,-620,302,-874,-761,-983,-452,418,-20,671,83,-720,396,9,112,854,-118,296,171,-515,-419,-473,164,-371,-850,890,344,-689,698,442,329,-656,-822,393,-865,-220,857,-167,976,740,-440,-274,750,-714,-256,710,374,-246,-6,-411,957,-72,104,-49,725,761,-955,8,967,481,-597,-862,312,880,138,-47,-111,-907,-60,806,839,-264,-788,264,-576,-917,-928,-140,-593,-957,140,-565,-181,369,61,-888,392,-938,-43,-491,166,-247,764,769,108,-480,317,361,-764,-647,422,-638,-420,-642,-277,486,121,955,-137,465,-1000,49,492,283,994,-442,515,627,-147,-859,-257,-493,485,-3,-556,5,683,524,-127,875,336,227,820,-204,-561,513,403,-541,784,-187,87,413,-759,496,-57,244,330,211,824,-809,501,-332,904,90,-326,-618,943,-320,552,326,615,210,-148,-633,-668,995,-548,-393,122,-434,-489,203,-952,315,818,-962,247,188,80,271,-933,896,-756,-17,728,-735,-679,-229,-416,-184,718,116,-219,-433,-834,-632,-643,-403,18,345,-573,99,-640,-61,786,407,970,-266,753,985,143,-870,-399,978,-931,-248,983,1000,-948,-100,-682,663,253,813,805,-436,-224,-657,-31,126,694,-360,441,866,-58,816,617,884,-784,-275,923,-472,647,844,724,-947,370,-358,-412,512,-525,-461,184,745,157,-337,-739,-66,532,324,236,-510,-711,-813,-552,841,579,-438,-967,355,530,-743,-701,-323,537,648,225,-895,131,-610,-726,-563,285,115,546,-96,290,915,-919,-305,239,301,-205,-308,-575,-15,94,350,-386,-848,-75,-630,502,-85,867,-333,103,195,656,158,439,-851,47,-349,792,-936,331,632,215,795,-846,-457,-969,565,641,78,918,849,-54,-729,-884,-71,-390,389,-528,292,111,82,-876,-774,-755,234,266,-352,874,-847,-542,-639,-684,876,547,721,180,-236,320,-742,-245,-937,-680,-779,-198,202,827,-141,123,541,-564,608,958,762,-139,622,230,53,445,181,278,-172,-624,153,383,804,-509,-562,221,922,-369,864,-934,84,-568,406,-798,831,611,-203,325,668,-312,430,213,-869,996,-970,-695,450,-474,-854,901,52,652,-325,-272,859,233,-926,132,954,797,-766,612,-698,574,702,-716,237,-410,276,894,-748,-271,-39,962,-905,-128,986,934,399,628,-747,508,-123,642,789,600,-857,-612,607,775,837,388,-819,-290,987,311,-530,-872,598,846,212,4,95,529,-878,159,64,-537,-52,-521,243,868,-234,462,-64,118,-295,-353,638,540,137,66,145,-134,-906,-707,-455,-23,198,-526,765,771,-592,-825,669,973,10,493,-216,-340,289,-254,-950,-40,-155,16,-977,660,288,-21,410,906,-497,-344,390,-637,-9,-868,-626,-961,-699,-760,-728,-976,-658,-490,-749,778,-591,-635,-595,549,752,899,-454,703,197,-559,963,-251,-615,34,727,670,241,472,163,-815,895,-527,-665,279,-484,-710,993,362,-752,101,-667,-994,-980,-963,-132,-941,644,716,-317,-301,-53,348,151,510,-993,-306,548,-929,-792,419,-427,-960,26,-688,-342,-733,63,-418,734,-404,-503,785,491,-142,-377,-705,-415,-943,-916,-262,56,-887,810,-26,-315,-828,665,739,165,85,-74,401,196,697,-569,-995,368,840,-339,-98,72,-971,968,825,712,877,-93,873,168,714,-956,-816,-946,-157,-92,322,135,-757,843,194,715,229,-409,742,889,902,-883,-27,231,-449,154,-161,-863,-289,-391,-628,-67,365,-242,891,-146,723,337,684,-602,-104,979,-909,489,-619,343,-789,11,-964,-932,-158,888,-475,32,819,321,394,-879,41,-470,357,-144,705,-951,754,832,415,653,134,-991,542,591,-32,971,308,560,991,637,-117,756,359,-279,185,-207,-845,447,141,872,38,-802,-676,-925,-311,-188,885,-456,-803,-81,-221,-712,-351,834,270,631,735,-385,-160,-87,256,24,-924,-459,680,-880,-767,799,-860,783,-558,564,988,-486,676,-260,788,434,-463,-763,-494,972
]
function sort (arr = []) {
    // return arr.length
    if(arr.length < 2) return arr;

    let pivot = arr[arr.length-1];
    let left = [];
    let right = [];
    for(let i=0; i< arr.length -1;i++) {
        if(arr[i] < pivot) {
            left.push(arr[i])
        } else {

            right.push(arr[i])
        }
    }

    return [...sort(left), pivot, ...sort(right)]
}


var threeSumClosestUse3For = function(nums, target) {
    let cousest = nums[0]+nums[1]+nums[2]
    nums = sort(nums)
     if( nums.length == 3) {
        return nums[0]+nums[1]+nums[2]
    }
    for( let i = 0; i< nums.length; i++) {
        for(let j = i+1; j < nums.length; j++) {
            for( k=j+1; k< nums.length; k++) {
                let sum = nums[i]+ nums[j]+ nums[k];
                // console.log(sum);
                if( Math.abs(target - cousest) > Math.abs(target- sum)) {
                    cousest = sum
                }
            }
        }
    }
    return cousest
};

let ThreeSumCloset = function (nums = [], target) {
    let closest = 10000000;
    // nums = sort(nums);
    nums.sort((a,b) => a-b)
    console.log(nums);
    if( nums.length == 3) {
        return nums[0]+nums[1]+nums[2]
    }

    for( let i=0; i< nums.length -2; i++) {
        let pointer1 = i+1;
        let pointer2 = nums.length -1;
        while( pointer1 < pointer2) {
            let sum = nums[i] + nums[pointer1] + nums[pointer2];

            if(Math.abs(target - closest) > Math.abs(target- sum)) {
                closest = sum;
            }

            if( sum > target) {
                pointer2 --
            } else {
                pointer1 ++
            }
        }
    }
    return closest
}

let a =ThreeSumCloset(arr, 6897)
console.log(a);


